" vim:ts=2:sts=2:sw=2:et:nowrap
"
syntax on
filetype plugin indent on

"== Plugin Setup ===============================================================

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Plugin management
Plug 'junegunn/vim-plug'

" LSP
Plug 'neoclide/coc.nvim',                          { 'branch': 'release' }
"Plug 'neoclide/coc-highlight',                     { 'do': 'yarn install --frozen-lockfile && yarn build' }
"
" Visuals
Plug 'arcticicestudio/nord-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" General-purpose
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'pakutoma/toggle-terminal'
Plug 'scrooloose/nerdtree',                        { 'on': 'NERDTreeToggle' }
Plug 'luochen1990/rainbow'
Plug 'tpope/vim-surround'

" vim customization + features
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-projectionist'

" clojure support
Plug 'NoahTheDuke/coc-clojure',                    { 'for': 'clojure' }
Plug 'tpope/vim-fireplace',                        { 'for': 'clojure' }
Plug 'tpope/vim-salve',                            { 'for': 'clojure' }
Plug 'tpope/vim-classpath',                        { 'for': 'clojure' }
Plug 'guns/vim-sexp',                              { 'for': 'clojure' }
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }
"Plug 'liquidz/vim-iced',                           { 'for': 'clojure' }
"Plug 'liquidz/vim-iced-coc-source',                { 'for': 'clojure' }
"Plug 'liquidz/vim-iced-function-list',             { 'for': 'clojure', 'on': 'IcedBrowseFunction' }
"Plug 'liquidz/vim-iced-project-namespaces',        { 'for': 'clojure', 'on': 'IcedBrowseNamespace' }
Plug 'clojure-vim/vim-jack-in',                    { 'for': 'clojure' }

" scala support
Plug 'derekwyatt/vim-scala',                       { 'for' : 'clojure' }

call plug#end()

let g:toggle_terminal#position = 'botright'
"let g:dispatch_strategy='tmux'
let g:dispatch_tmux_height = '50% -h'

let g:salve_auto_start_repl=1

let g:fzf_command_prefix = 'Fz'

let g:airline_theme='nord'
let g:airline_powerline_fonts=1
let g:nord_bold_vertical_split_line=1

"" rainbow parentheses
let g:rainbow_active = 1

let NERDTreeKeepTreeInNewTab=1

let g:mapleader=' '
let g:maplocalleader=','
let g:iced_enable_default_key_mappings = v:true

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
    let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:iced#buffer#stdout#mods = 'vertical rightbelow'

"== General Setup ==============================================================

" Disable annoying bell sounds
set belloff=all

" Disable BCE to make colorschemes work on tmux
set t_ut=
set t_Co=256
"set termguicolors
colorscheme nord

" Use all utf-8 for encoding a file.
scriptencoding utf-8
set fileencodings=utf-8,utf-16le,utf-16be
set encoding=utf-8

set textwidth=120
if &diff
  set winwidth=5
  set diffopt+=iwhite
else
  set foldmethod=syntax
  set foldlevelstart=99
  set winwidth=121
  set colorcolumn=+1
endif

set scrollopt+=hor

" Default indent style
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" UTF-8 Visual aids setup.
set showbreak=>\ 
set fillchars=vert:│,stl:-
set list
set listchars=tab:\|-,trail:~,eol:$,space:·
nmap <silent> <F9> :set list!<CR>

set nowrap
set fo-=t " Don't format text automatically using textwidth
set bs=indent,eol,start
set ignorecase
set virtualedit=onemore
set modelines=5

" Highlight current cursor line
set cul

set scrolloff=999

"= Line number display Setup ===================================================

" default to relative line numbers
set signcolumn=yes
set relativenumber
set number
set numberwidth=5

" show absolute line numbers when focus is lost
au FocusLost *   :set nu | set nornu
au FocusGained * :set rnu | set nu

" show absolute line numbers when in insert mode
au InsertEnter * :set nu | set nornu
au InsertLeave * :set rnu | set nu

"= Quicklist management Setup ==================================================

nmap <silent> <leader>i"gu i=system("uuidgen \| tr -d '\n' \| tr '[:upper:]' '[:lower:]'")<CR><Esc>
nmap <silent> <leader>igu i"=system("uuidgen \| tr -d '\n' \| tr '[:upper:]' '[:lower:]'")<CR>"<Esc>
nmap <silent> <leader>ci"u ci"=system("uuidgen \| tr -d '\n' \| tr '[:upper:]' '[:lower:]'")<CR><Esc>

nmap <silent> <leader>/g :FzGit<cr>
nmap <silent> <leader>// :FZF<CR>
nmap <silent> <leader>/c :FzAg<CR>

"nmap <silent> <leader>gt <Plug>(iced_cycle_src_and_test)
"nmap <silent> <leader>enR <Plug>(iced_refresh_all)

nmap <silent> <leader>t" :bo term<CR>

nmap <silent> <F3> :NERDTreeToggle<CR>
nmap <silent> <F4> :NERDTreeFind<CR>
