" vim: set ts=2 sts=2 sw=2 noexpandtab nowrap:
"== Plugin Setup ===============================================================

set nocompatible              " be iMproved, required
filetype off                  " required

if !has('gui_running')
	" set the runtime path to include Vundle and initialize
	set rtp+=~/.vim/bundle/Vundle.vim
	call vundle#begin()

	Plugin 'VundleVim/Vundle.vim'

	Plugin 'vim-scripts/a.vim'
	Plugin 'elzr/vim-json'
	Plugin 'maksimr/vim-jsbeautify'
	Plugin 'burnettk/vim-angular'
	Plugin 'pangloss/vim-javascript'
	Plugin 'tpope/vim-fugitive'

	Plugin 'chrisbra/vim-diff-enhanced'
	Plugin 'editorconfig/editorconfig-vim'
	Plugin 'benmills/vimux'
	Plugin 'christoomey/vim-tmux-navigator'

	Plugin 'janko-m/vim-test'
	Plugin 'skywind3000/asyncrun.vim'

	Plugin 'hdiniz/vim-gradle' "Gradle build integration
	Plugin 'mikelue/vim-maven-plugin'
	Plugin 'vim-syntastic/syntastic'
	Plugin 'aklt/plantuml-syntax'
	Plugin 'hashivim/vim-terraform'
	Plugin 'udalov/kotlin-vim'

	Plugin 'vim-airline/vim-airline'
	Plugin 'vim-airline/vim-airline-themes'

	call vundle#end()            " required
	filetype plugin indent on    " required

	" vim-test settings
	let test#straegy = 'vimux'

	let g:syntastic_always_populate_loc_list = 1
	let g:syntastic_auto_loc_list = 1
	let g:syntastic_check_on_wq = 0

	let g:syntastic_json_checkers = ['jsonlint-php']
	let g:syntastic_javascript_checkers = ['eslint']
	let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute " ,"trimming empty \<", "inserting implicit ", "unescaped \&" , "lacks \"action", "lacks value", "lacks \"src", "is not recognized!", "discarding unexpected", "replacing obsolete "]
endif

"== General Setup ==============================================================

if has('win32') || has('win64')
	" Make windows use ~/.vim too, I don't want to use _vimfiles
	set runtimepath^=~/.vim
endif

syntax on

" Disable BCE to make colorschemes work on tmux
set t_ut=
set t_Co=256
if !has('gui_running')
	colorscheme fu
endif

" Use all utf-8 for encoding a file.
scriptencoding utf-8
set fileencodings=utf-8,utf-16le,utf-16be
set encoding=utf-8

set textwidth=80
if &diff
	set winwidth=5
	set diffopt+=iwhite
else
	set foldmethod=syntax
	set foldlevelstart=99
	set winwidth=85
	set colorcolumn=+1
	hi  ColorColumn ctermbg=236 guibg=#444444
endif

set scrollopt+=hor

" Default indent style
set tabstop=2 shiftwidth=2 softtabstop=2 noexpandtab

" UTF-8 Visual aids setup.
set showbreak=>\ 
set fillchars=vert:│,stl:-
set list listchars=tab:\|-,trail:~,eol:$,space:·
nmap <silent> <F9> :set list!<CR>

set wrap
set bs=indent,eol,start
set ignorecase
set virtualedit=onemore
set modelines=5

" Keep the cursor always centered
set scrolloff=999

" Statusline setup - Show buffer number, buffer filename
"set laststatus=2
"set statusline=%02n)\ %F%m%r%h%w\ %{FugitiveStatusline()}%=\ (%{&ff},%{&fenc}){%Y}[%05l,%03v][%03p%%,%05LL]
"set statusline=%02n)\ %F%m%r%h%w\ %=\ (%{&ff},%{&fenc}){%Y}[%05l,%03v][%03p%%,%05LL]

" Highlight current cursor line
set cul
hi CursorLine term=underline cterm=underline ctermbg=none

" General filetype management
au BufWritePost          *.pu      :silent make
au BufNewFile,BufReadPre *.mk      setlocal noexpandtab
au BufNewFile,BufReadPre Makefile* setlocal noexpandtab

" Window navigation
nmap <S-F5> :tabp<CR>
nmap <S-F6> :tabn<CR>
nmap <F5> <C-w>W
nmap <F6> <C-w>w

" Grep commands
nmap gR :grep -RIi <cword> --exclude-dir=".svn" --exclude-dir=".git" --exclude-dir="lib" --exclude-dir="lib-other" --exclude="*.min.*" .
nmap gr :grep -RIi <cword> --exclude-dir=".svn" --exclude-dir=".git" --exclude-dir="lib" --exclude-dir="lib-other" --exclude="*.min.*" .<CR>
nmap glr :lgrep -RIi <cword> --exclude-dir=".svn" --exclude-dir=".git" --exclude-dir="lib" --exclude-dir="lib-other" --exclude="*.min.*" .<CR>

"= Line number display Setup ===================================================

" default to relative line numbers
set relativenumber
set nonumber
set numberwidth=5

" show absolute line numbers when focus is lost
au FocusLost *   :set nu | set nornu
au FocusGained * :set rnu | set nonu

" show absolute line numbers when in insert mode
au InsertEnter * :set nu | set nornu
au InsertLeave * :set rnu | set nonu

"= Window and buffer management setup ==========================================

function! MarkWindow()
	let g:markedWinNum = winnr()
endfunction

function! SwapMarkedWindow()
	"Mark destination
	let curNum = winnr()
	let curBuf = bufnr( "%" )
	exe g:markedWinNum . "wincmd w"
	"Switch to source and shuffle dest->source
	let markedBuf = bufnr( "%" )
	"Hide and open so that we aren't prompted and keep history
	exe 'hide buf' curBuf
	"Switch to dest and shuffle source->dest
	exe curNum . "wincmd w"
	"Hide and open so that we aren't prompted and keep history
	exe 'hide buf' markedBuf 
endfunction

function! YankBuffer()
	let g:bufops_selected_buffer = bufnr("%")
endfunction

function! CutBuffer()
	call YankBuffer()
	exe 'hide'
endfunction

function! PasteBuffer()
	exe 'buf' g:bufops_selected_buffer
	unlet g:bufops_selected_buffer
endfunction

nmap <leader>xb :call CutBuffer()<CR>
nmap <leader>yb :call YankBuffer()<CR>
nmap <leader>pb :call PasteBuffer()<CR>
nmap <silent> <leader>mw :call MarkWindow()<CR>
nmap <silent> <leader>pw :call SwapMarkedWindow()<CR>

"= Quicklist management Setup ==================================================

" Thanks to http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
function! GetBufferList()
	redir =>buflist
	silent! ls!
	redir END
	return buflist
endfunction

function! ToggleList(bufname, pfx, height)
	let buflist = GetBufferList()
	for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
		if bufwinnr(bufnum) != -1
			exec(a:pfx.'close')
			return
		endif
	endfor
	if a:pfx == 'l' && len(getloclist(0)) == 0
		echohl ErrorMsg
		echo "Location List is Empty."
		return
	endif
	let winnr = winnr()
	exec(a:pfx.'open '.a:height)
	if winnr() != winnr
		wincmd p
	endif
endfunction

nmap <silent> <F7> :call ToggleList("Location List", 'l', 5)<CR>
nmap <silent> <F8> :call ToggleList("Quickfix List", 'c', 5)<CR>
