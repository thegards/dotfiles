" vim:ts=2:sts=2:sw=2:noet:nowrap
"== Plugin Setup ===============================================================

if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Plugin management
Plug 'junegunn/vim-plug'

" General-purpose
Plug 'tpope/vim-fugitive'
Plug 'vim-syntastic/syntastic'
Plug 'scrooloose/nerdtree',               { 'on': 'NERDTreeToggle' }
Plug 'aserebryakov/vim-todo-lists'
Plug 'arcticicestudio/nord-vim'

" vim customization + features
Plug 'chrisbra/vim-diff-enhanced'
Plug 'editorconfig/editorconfig-vim'
Plug 'janko-m/vim-test'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/fzf.vim'
Plug 'neoclide/coc.nvim',                 { 'branch': 'release' }
Plug 'tyru/open-browser.vim'

" Javascript + Typescript - Common
Plug 'burnettk/vim-angular',              { 'for': ['javascript', 'typescript'] }
Plug 'elzr/vim-json',                     { 'for': ['javascript', 'typescript', 'json'] }
Plug 'prettier/vim-prettier',             { 'for': ['javascript', 'typescript', 'json'] }

" Typescript support
Plug 'leafgarland/typescript-vim',        { 'for': ['typescript'] }
Plug 'Quramy/tsuquyomi',                  { 'for': ['typescript', 'javascript'] }

" Javascript
Plug 'pangloss/vim-javascript',           { 'for': ['javascript'] }
"Plug 'ternjs/tern_for_vim',               { 'for': ['javascript'] }

" Build tool integration
Plug 'hdiniz/vim-gradle'
Plug 'mikelue/vim-maven-plugin'

" Other languages
Plug 'aklt/plantuml-syntax',              { 'for': 'plantuml' }
Plug 'weirongxu/plantuml-previewer.vim',  { 'for': 'plantuml' }
Plug 'hashivim/vim-terraform',            { 'for': 'terraform' }
Plug 'udalov/kotlin-vim',                 { 'for': 'kotlin' }

call plug#end()

" vim-test settings
let test#strategy = 'vimterminal'

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1

let g:tsuquyomi_disable_quickfix = 1
let g:tsuquyomi_shortest_import_path = 1
let g:tsuquyomi_single_quote_import = 1
let g:tsuquyomi_semicolon_import = 1

let g:prettier#autoformat = 1
let g:prettier#autoformat_require_pragma = 0
let g:prettier#autoformat_config_present = 1

let g:syntastic_check_on_wq = 0
let g:syntastic_json_checkers = ['jsonlint-php']
let g:syntastic_javascript_checkers = ['prettier']
let g:syntastic_typescript_checkers = ['tsuquyomi'] " You shouldn't use 'tsc' checker.

let g:airline_theme='nord'
let g:airline_powerline_fonts=1
"== General Setup ==============================================================

if has('win32') || has('win64')
	" Make windows use ~/.vim too, I don't want to use _vimfiles
	set runtimepath^=~/.vim
endif

syntax on

" Disable BCE to make colorschemes work on tmux
set t_ut=
set t_Co=256
colorscheme nord

" Use all utf-8 for encoding a file.
scriptencoding utf-8
set fileencodings=utf-8,utf-16le,utf-16be
set encoding=utf-8

set textwidth=120
if &diff
	set winwidth=5
	set diffopt+=iwhite
else
	set foldmethod=syntax
	set foldlevelstart=99
	set winwidth=85
	set colorcolumn=+1
endif

set scrollopt+=hor

" Default indent style
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" UTF-8 Visual aids setup.
set showbreak=>\ 
set fillchars=vert:│,stl:-
"set list
set listchars=tab:\|-,trail:~,eol:$,space:·
nmap <silent> <F9> :set list!<CR>

nnoremap zq :qa<CR>
nnoremap <F3> :NERDTreeToggle<CR>
nnoremap <S-F6> :TsuquyomiRenameSymbol<CR>
nnoremap <C-F5> :TestFile<CR>
nnoremap <S-F5> :TestNearest<CR>

set nowrap
set fo-=t " Don't format text automatically using textwidth
set bs=indent,eol,start
set ignorecase
set virtualedit=onemore
set modelines=5

" Highlight current cursor line
set cul

set scrolloff=999
set sidescrolloff=999

"= Line number display Setup ===================================================

" default to relative line numbers
set signcolumn=number
set relativenumber
set number
set numberwidth=5

" show absolute line numbers when focus is lost
au FocusLost *   :set nu | set nornu
au FocusGained * :set rnu | set nu

" show absolute line numbers when in insert mode
au InsertEnter * :set nu | set nornu
au InsertLeave * :set rnu | set nu

"= Window and buffer management setup ==========================================

function! MarkWindow()
	let g:markedWinNum = winnr()
endfunction

function! SwapMarkedWindow()
	"Mark destination
	let curNum = winnr()
	let curBuf = bufnr( "%" )
	exe g:markedWinNum . "wincmd w"
	"Switch to source and shuffle dest->source
	let markedBuf = bufnr( "%" )
	"Hide and open so that we aren't prompted and keep history
	exe 'hide buf' curBuf
	"Switch to dest and shuffle source->dest
	exe curNum . "wincmd w"
	"Hide and open so that we aren't prompted and keep history
	exe 'hide buf' markedBuf 
endfunction

function! YankBuffer()
	let g:bufops_selected_buffer = bufnr("%")
endfunction

function! CutBuffer()
	call YankBuffer()
	exe 'hide'
endfunction

function! PasteBuffer()
	exe 'buf' g:bufops_selected_buffer
	unlet g:bufops_selected_buffer
endfunction

nmap <leader>xb :call CutBuffer()<CR>
nmap <leader>yb :call YankBuffer()<CR>
nmap <leader>pb :call PasteBuffer()<CR>
nmap <silent> <leader>mw :call MarkWindow()<CR>
nmap <silent> <leader>pw :call SwapMarkedWindow()<CR>

"= Quicklist management Setup ==================================================

" Thanks to http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
function! GetBufferList()
	redir =>buflist
	silent! ls!
	redir END
	return buflist
endfunction

function! ToggleList(bufname, pfx, height)
	let buflist = GetBufferList()
	for bufnum in map(filter(split(buflist, '\n'), 'v:val =~ "'.a:bufname.'"'), 'str2nr(matchstr(v:val, "\\d\\+"))')
		if bufwinnr(bufnum) != -1
			exec(a:pfx.'close')
			return
		endif
	endfor
	if a:pfx == 'l' && len(getloclist(0)) == 0
		echohl ErrorMsg
		echo "Location List is Empty."
		return
	endif
	let winnr = winnr()
	exec(a:pfx.'open '.a:height)
	if winnr() != winnr
		wincmd p
	endif
endfunction

nmap <silent> <F7> :call ToggleList("Location List", 'l', 5)<CR>
nmap <silent> <F8> :call ToggleList("Quickfix List", 'c', 5)<CR>


nmap <silent> <C-S-F> :Ag<CR>


  inoremap <silent><expr> <c-@> coc#refresh()
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <C-n> :FZF<cr>
